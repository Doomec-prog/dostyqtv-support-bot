import os
import logging
import asyncio
from typing import Dict, List, Optional
from datetime import datetime, timedelta
import json
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from telegram.constants import ParseMode
import sqlite3
from contextlib import asynccontextmanager
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class DostyqTVBot:
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
        self.BOT_TOKEN = os.getenv('BOT_TOKEN')
        self.GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
        self.ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x]

        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π DostyqTV
        self.knowledge_base = {
            '–ø—Ä–æ–≥—Ä–∞–º–º—ã': {
                '–Ω–æ–≤–æ—Å—Ç–∏': '–ù–æ–≤–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!',
                '—Å–µ—Ä–∏–∞–ª—ã': '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã: "–¢—Ä–æ—Ü–∫–∏–π", "–î–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π —Å–∏–Ω–¥—Ä–æ–º", "–ê–∫—Ç–µ—Ä"',
                '–¥–µ—Ç—Å–∫–∏–µ': '–î–µ—Ç—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–ø—É—Å—Ç—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!',
                '—Å–ø–æ—Ä—Ç': '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–ø—É—Å—Ç—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!'
            },
            '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ': {
                '–∫–∞—á–µ—Å—Ç–≤–æ': '–í–µ—â–∞–Ω–∏–µ –≤ HD –∫–∞—á–µ—Å—Ç–≤–µ 1080p',
                '–∫–∞–Ω–∞–ª—ã': 'DostyqTV –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 44 –≤ –∫–∞–±–µ–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö',
                '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç': '–û–Ω–ª–∞–π–Ω —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ dostyq.tv',
                '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ DostyqTV –≤ App Store –∏ Google Play'
            },
            '–∫–æ–Ω—Ç–∞–∫—Ç—ã': {
                '—Ç–µ–ª–µ—Ñ–æ–Ω': '+7 777 013 3812',
                'email': 'support@dostyq.tv',
                '–∞–¥—Ä–µ—Å': 'https://dostyq.tv',
                '—Å–∞–π—Ç': 'https://dostyq.tv'
            }
        }

        # FAQ –±–∞–∑–∞
        self.faq = {
            '–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª?': '–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∫–∞–±–µ–ª—å–Ω–æ–≥–æ –¢–í –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –∫–∞–Ω–∞–ª DostyqTV –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 44',
            '–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏—Å—Ç–∞–≤–∫—É. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è - –∑–≤–æ–Ω–∏—Ç–µ +7 771 300 05 02, +7 702 300 05 01',
            '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º': '–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ dostyq.tv –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–∞—Ç–∞–ª–æ–≥"',
            '–†–µ–∫–ª–∞–º–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ': '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã: reklama@dostyq.tv –∏–ª–∏ +7 (727) 24-24-25'
        }

    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('dostyqtv_bot.db')
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                message TEXT,
                status TEXT DEFAULT 'open',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                resolved_at TIMESTAMP,
                category TEXT
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS stats (
                date DATE PRIMARY KEY,
                users_count INTEGER DEFAULT 0,
                messages_count INTEGER DEFAULT 0,
                tickets_count INTEGER DEFAULT 0
            )
        ''')

        conn.commit()
        conn.close()

    async def get_ai_response(self, user_message: str, user_context: Dict = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI API Gemini"""
        if not self.GEMINI_API_KEY:
            logger.warning("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç.")
            return await self.get_fallback_response(user_message)

        try:
            system_prompt = f"""
            –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–ª–µ–∫–∞–Ω–∞–ª–∞ DostyqTV. –û—Ç–≤–µ—á–∞–π –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –≤–æ–ø—Ä–æ—Å–∞.

            –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:
            {json.dumps(self.knowledge_base, ensure_ascii=False, indent=2)}

            FAQ:
            {json.dumps(self.faq, ensure_ascii=False, indent=2)}

            –ü—Ä–∞–≤–∏–ª–∞:
            1. –í—Å–µ–≥–¥–∞ –±—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.
            2. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —É–∫–∞–∑–∞–≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã.
            3. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
            4. –û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏.
            5. –ü—Ä–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è.
            """

            return await self._call_gemini(user_message, system_prompt)

        except Exception as e:
            logger.error(f"Error with Gemini API: {e}")
            return await self.get_fallback_response(user_message)

    async def _call_gemini(self, user_message: str, system_prompt: str) -> str:
        """Google Gemini API –≤—ã–∑–æ–≤"""
        url = f'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={self.GEMINI_API_KEY}'

        headers = {'Content-Type': 'application/json'}

        data = {
            "contents": [{
                "parts": [{
                    "text": f"{system_prompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}"
                }]
            }],
            "generationConfig": {
                "temperature": 0.7,
                "maxOutputTokens": 512
            }
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ
                    if 'candidates' in result and result['candidates']:
                        return result['candidates'][0]['content']['parts'][0]['text']
                    else:
                        logger.error(f"Gemini API response format error: {result}")
                        return await self.get_fallback_response(user_message)
                else:
                    error_text = await response.text()
                    logger.error(f"Gemini API error: {response.status}, {error_text}")
                    return await self.get_fallback_response(user_message)

    async def get_fallback_response(self, user_message: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        message_lower = user_message.lower()

        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(word in message_lower for word in ['–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ø–µ—Ä–µ–¥–∞—á']):
            return "üì∫ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ dostyq.tv –≤ —Ä–∞–∑–¥–µ–ª–µ '–ö–∞—Ç–∞–ª–æ–≥'"

        elif any(word in message_lower for word in ['–∫–∞—á–µ—Å—Ç–≤–æ', '–ø–ª–æ—Ö–æ', '—Ç–æ—Ä–º–æ–∑–∏—Ç', '–∑–∞–≤–∏—Å–∞–µ—Ç']):
            return "üîß –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∫–∞—á–µ—Å—Ç–≤–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏—Å—Ç–∞–≤–∫—É. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: +7 771 300 05 02, +7 702 300 05 01"

        elif any(word in message_lower for word in ['–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å', '–∫–∞–Ω–∞–ª', '–Ω–∞–π—Ç–∏']):
            return "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ DostyqTV:\n\nüìç –ù–∞–π–¥–∏—Ç–µ –Ω–∞—Å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 44 –≤ –∫–∞–±–µ–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∫–∞–±–µ–ª—å–Ω–æ–≥–æ –¢–í."

        elif any(word in message_lower for word in ['–∫–æ–Ω—Ç–∞–∫—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–≤—è–∑–∞—Ç—å—Å—è']):
            return "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã DostyqTV:\n\n‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞: +7 777 013 3812\nüìß Email: support@dostyq.tv\nüåê –°–∞–π—Ç: https://dostyq.tv"

        elif any(word in message_lower for word in ['—Ä–µ–∫–ª–∞–º–∞', '—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ']):
            return "üì¢ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:\n\nüìß reklama@dostyq.tv\n‚òéÔ∏è +7 (727) 24-24-25"

        else:
            return "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ç–µ–ª–µ–∫–∞–Ω–∞–ª—É DostyqTV.\n\nüîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É."

    async def save_user(self, user):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        conn = sqlite3.connect('dostyqtv_bot.db')
        cursor = conn.cursor()

        cursor.execute('''
            INSERT OR REPLACE INTO users (id, username, first_name, last_name, last_activity)
            VALUES (?, ?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, user.last_name, datetime.now()))

        conn.commit()
        conn.close()

    async def create_ticket(self, user_id: int, message: str, category: str = 'general'):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞"""
        conn = sqlite3.connect('dostyqtv_bot.db')
        cursor = conn.cursor()

        cursor.execute('''
            INSERT INTO tickets (user_id, message, category)
            VALUES (?, ?, ?)
        ''', (user_id, message, category))

        ticket_id = cursor.lastrowid
        conn.commit()
        conn.close()

        return ticket_id

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        await self.save_user(user)

        welcome_message = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ DostyqTV!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º DostyqTV.

üî• –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ø–µ—Ä–µ–¥–∞—á
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ:
        """

        keyboard = [
            [InlineKeyboardButton("üì∫ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–µ—Ä–µ–¥–∞—á", callback_data='schedule')],
            [InlineKeyboardButton("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='tech_support')],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
            [InlineKeyboardButton("üìã FAQ", callback_data='faq')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(welcome_message, reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ DostyqTV:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/schedule - –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–µ—Ä–µ–¥–∞—á
/contact - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
/ticket - –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è

üí¨ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!
        """

        await update.message.reply_text(help_text)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        data = query.data

        if data == 'schedule':
            schedule_text = self.faq['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º']
            await query.edit_message_text(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º:\n\n{schedule_text}")

        elif data == 'tech_support':
            tech_text = self.faq['–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º']
            await query.edit_message_text(f"üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n{tech_text}")

        elif data == 'contacts':
            contacts_text = f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\n–¢–µ–ª–µ—Ñ–æ–Ω: {self.knowledge_base['–∫–æ–Ω—Ç–∞–∫—Ç—ã']['—Ç–µ–ª–µ—Ñ–æ–Ω']}\nEmail: {self.knowledge_base['–∫–æ–Ω—Ç–∞–∫—Ç—ã']['email']}\n–°–∞–π—Ç: {self.knowledge_base['–∫–æ–Ω—Ç–∞–∫—Ç—ã']['—Å–∞–π—Ç']}"
            await query.edit_message_text(contacts_text)

        elif data == 'faq':
            faq_items = [f"‚ùì {q}\n‚úÖ {a}" for q, a in self.faq.items()]
            faq_text = "\n\n".join(faq_items)
            await query.edit_message_text(f"üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n{faq_text}")

        elif data == 'create_ticket':
            await self.ticket_command(update, context)


    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        await self.save_user(user)

        user_message = update.message.text

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI –∏–ª–∏ fallback
        response = await self.get_ai_response(user_message)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data='contacts')],
            [InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data='create_ticket')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(response, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def ticket_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–∏–∫–µ—Ç–∞
        user_id = update.effective_user.id
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–µ–µ
        message_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞."

        ticket_id = await self.create_ticket(user_id, message_text)

        response_text = (
            f"üìã –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
        )

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ callback –∫–Ω–æ–ø–∫–∏
        if update.callback_query:
            await update.callback_query.edit_message_text(response_text)
        else: # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ /ticket
            await update.message.reply_text(response_text)


    async def get_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        if update.effective_user.id not in self.ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return

        conn = sqlite3.connect('dostyqtv_bot.db')
        cursor = conn.cursor()

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM tickets WHERE status = "open"')
        open_tickets = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM tickets WHERE date(created_at) = date("now")')
        today_tickets = cursor.fetchone()[0]

        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DostyqTV Bot:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {total_users}
üé´ –û—Ç–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: {open_tickets}
üìã –û–±—Ä–∞—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_tickets}

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """

        conn.close()
        await update.message.reply_text(stats_text)

    def setup_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("ticket", self.ticket_command))
        application.add_handler(CommandHandler("stats", self.get_stats))

        # Callback –∫–Ω–æ–ø–∫–∏
        application.add_handler(CallbackQueryHandler(self.handle_callback))

        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def set_bot_commands(self, application):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand("help", "‚ùì –ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
            BotCommand("schedule", "üì∫ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–µ—Ä–µ–¥–∞—á"),
            BotCommand("contact", "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
            BotCommand("faq", "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
            BotCommand("ticket", "üìã –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ")
        ]

        await application.bot.set_my_commands(commands)
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –î–û –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    async def post_init(self, application: Application):
        """–ó–∞–¥–∞—á–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –Ω–æ –¥–æ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞."""
        await self.init_db()
        await self.set_bot_commands(application)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
            return
        if not self.GEMINI_API_KEY:
            logger.error("GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
            return

        # –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä `post_init`, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—à –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥
        application = (
            Application.builder()
            .token(self.BOT_TOKEN)
            .post_init(self.post_init)
            .build()
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers(application)
        
        logger.info("DostyqTV Support Bot –∑–∞–ø—É—â–µ–Ω!")
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: `run_polling` —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é. –û–Ω —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π.
        application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    bot = DostyqTVBot()
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –£–±–∏—Ä–∞–µ–º `asyncio.run()`. –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ `run`.
    bot.run()